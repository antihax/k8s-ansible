## install SQL, Elastic, NSQ, etc.

- hosts: masters
  tasks:
    - name: add bitnami helm repo
      kubernetes.core.helm_repository:
        name: bitnami
        repo_url: https://charts.bitnami.com/bitnami

    - name: create storage namespace
      kubernetes.core.k8s:
        name: storage
        kind: Namespace
        state: present
      register: storage_created

    - name: create sql secret
      kubernetes.core.k8s:
        state: present
        definition:
          kind: Secret
          api_version: v1
          metadata:
            name: sql-auth
            namespace: storage
          data:
            mariadb-root-password: "{{ lookup('ansible.builtin.password', '/dev/null chars=ascii_letters,digits,punctuation length=32') | b64encode }}"
          type: Opaque
      when: storage_created.changed

    - name: create volume backup job
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: longhorn.io/v1beta1
          kind: RecurringJob
          metadata:
            name: sql-backup
            namespace: longhorn-system
          spec:
            cron: "0 1 * * *"
            task: "backup"
            groups:
            - sql-backup
            retain: 30
            concurrency: 2

    - name: create sql storage class
      kubernetes.core.k8s:
        state: present
        definition:
          metadata:
            name: sql-class
            namespace: storage
          kind: StorageClass
          namespace: storage
          apiVersion: storage.k8s.io/v1
          provisioner: driver.longhorn.io
          allowVolumeExpansion: true
          parameters:
            numberOfReplicas: "2"
            staleReplicaTimeout: "2880"
            fromBackup: ""

    - name: create sql-backup storage class
      kubernetes.core.k8s:
        state: present
        definition:
          metadata:
            name: sql-backup-class
            namespace: storage
          kind: StorageClass
          namespace: storage
          apiVersion: storage.k8s.io/v1
          provisioner: driver.longhorn.io
          allowVolumeExpansion: true
          parameters:
            numberOfReplicas: "2"
            staleReplicaTimeout: "2880"
            fromBackup: ""
            recurringJobSelector: '[{"name":"sql-backup", "isGroup":true}]'

    - name: create sql volume
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: PersistentVolumeClaim
          metadata:
            name: sql-pvc
            namespace: storage
          spec:
            accessModes:
              - ReadWriteOnce
            storageClassName: sql-class
            resources:
              requests:
                storage: 200Gi

    - name: create sql backup volume
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: PersistentVolumeClaim
          metadata:
            name: sql-backup-pvc
            namespace: storage
          spec:
            accessModes:
              - ReadWriteOnce
            storageClassName: sql-backup-class
            resources:
              requests:
                storage: 200Gi

    - name: deploy mariadb
      kubernetes.core.helm:
        name: sql
        chart_ref: bitnami/mariadb
        release_namespace: storage
        release_state: present
        release_values:
          auth:
            existingSecret: sql-auth
          tls:
            enabled: true
            autoGenerated: true
          primary:
            extraVolumes: # mount persistently so backups are scheduled.
            - name: sql-backup-claim
              persistentVolumeClaim:
                claimName: sql-backup-pvc  
            extraVolumeMounts:
            - mountPath: "/backup"
              name: sql-backup-claim  
            persistence:
              existingClaim: sql-pvc
            configuration: |-
              [mysqld]
              skip-name-resolve
              explicit_defaults_for_timestamp
              basedir=/opt/bitnami/mariadb
              port=3306
              socket=/opt/bitnami/mariadb/tmp/mysql.sock
              tmpdir=/opt/bitnami/mariadb/tmp
              bind-address=0.0.0.0
              pid-file=/opt/bitnami/mariadb/tmp/mysqld.pid
              log-error=/opt/bitnami/mariadb/logs/mysqld.log
              collation-server = utf8_unicode_ci
              init-connect='SET NAMES utf8'
              character-set-server = utf8
              # optimize
              skip-log-bin
              default_storage_engine=InnoDB              
              max_allowed_packet = 1024M
              skip-host-cache
              skip-name-resolve
              max_prepared_stmt_count = 104857              
              innodb_log_file_size = 1G
              innodb_flush_method=O_DIRECT
              innodb_flush_log_at_trx_commit = 0
              innodb_thread_concurrency = 0
              innodb_log_buffer_size=8G
              innodb_buffer_pool_size=30G
              table_open_cache = 512
              sort_buffer_size = 2M
              read_buffer_size = 2M
              read_rnd_buffer_size = 8M
              thread_cache_size = 8
              query_cache_size = 0
              query_cache_type = 0
              max_heap_table_size=1024M
              tmp_table_size=1024M
              max_connections=150
              max_connect_errors=150
              wait_timeout=86400
              interactive_timeout=86400
              connect_timeout=30
              # log settings
              expire_logs_days=7
              # close strict 
              sql_mode=IGNORE_SPACE,NO_ENGINE_SUBSTITUTION

              [client]
              port=3306
              socket=/opt/bitnami/mariadb/tmp/mysql.sock
              default-character-set=utf8mb4

              [manager]
              port=3306
              socket=/opt/bitnami/mariadb/tmp/mysql.sock
              pid-file=/opt/bitnami/mariadb/tmp/mysqld.pid

    - name: label nodes
      delegate_to: master01
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: Service
          metadata:
            name: "sql"
            namespace: "storage"
          spec:
            type: ExternalName
            externalName: "sql-mariadb.storage.svc.cluster.local"
